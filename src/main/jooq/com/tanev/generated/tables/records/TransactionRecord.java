/*
 * This file is generated by jOOQ.
 */
package com.tanev.generated.tables.records;


import com.tanev.generated.tables.Transaction;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TransactionRecord extends UpdatableRecordImpl<TransactionRecord> implements Record5<Integer, Integer, String, BigDecimal, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.transaction.transfer_id</code>.
     */
    public TransactionRecord setTransferId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.transaction.transfer_id</code>.
     */
    public Integer getTransferId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.transaction.account_id</code>.
     */
    public TransactionRecord setAccountId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.transaction.account_id</code>.
     */
    public Integer getAccountId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.transaction.transaction_type</code>.
     */
    public TransactionRecord setTransactionType(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.transaction.transaction_type</code>.
     */
    public String getTransactionType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.transaction.amount</code>.
     */
    public TransactionRecord setAmount(BigDecimal value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.transaction.amount</code>.
     */
    public BigDecimal getAmount() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>public.transaction.date</code>.
     */
    public TransactionRecord setDate(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.transaction.date</code>.
     */
    public LocalDateTime getDate() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, BigDecimal, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, Integer, String, BigDecimal, LocalDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Transaction.TRANSACTION.TRANSFER_ID;
    }

    @Override
    public Field<Integer> field2() {
        return Transaction.TRANSACTION.ACCOUNT_ID;
    }

    @Override
    public Field<String> field3() {
        return Transaction.TRANSACTION.TRANSACTION_TYPE;
    }

    @Override
    public Field<BigDecimal> field4() {
        return Transaction.TRANSACTION.AMOUNT;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Transaction.TRANSACTION.DATE;
    }

    @Override
    public Integer component1() {
        return getTransferId();
    }

    @Override
    public Integer component2() {
        return getAccountId();
    }

    @Override
    public String component3() {
        return getTransactionType();
    }

    @Override
    public BigDecimal component4() {
        return getAmount();
    }

    @Override
    public LocalDateTime component5() {
        return getDate();
    }

    @Override
    public Integer value1() {
        return getTransferId();
    }

    @Override
    public Integer value2() {
        return getAccountId();
    }

    @Override
    public String value3() {
        return getTransactionType();
    }

    @Override
    public BigDecimal value4() {
        return getAmount();
    }

    @Override
    public LocalDateTime value5() {
        return getDate();
    }

    @Override
    public TransactionRecord value1(Integer value) {
        setTransferId(value);
        return this;
    }

    @Override
    public TransactionRecord value2(Integer value) {
        setAccountId(value);
        return this;
    }

    @Override
    public TransactionRecord value3(String value) {
        setTransactionType(value);
        return this;
    }

    @Override
    public TransactionRecord value4(BigDecimal value) {
        setAmount(value);
        return this;
    }

    @Override
    public TransactionRecord value5(LocalDateTime value) {
        setDate(value);
        return this;
    }

    @Override
    public TransactionRecord values(Integer value1, Integer value2, String value3, BigDecimal value4, LocalDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransactionRecord
     */
    public TransactionRecord() {
        super(Transaction.TRANSACTION);
    }

    /**
     * Create a detached, initialised TransactionRecord
     */
    public TransactionRecord(Integer transferId, Integer accountId, String transactionType, BigDecimal amount, LocalDateTime date) {
        super(Transaction.TRANSACTION);

        setTransferId(transferId);
        setAccountId(accountId);
        setTransactionType(transactionType);
        setAmount(amount);
        setDate(date);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TransactionRecord
     */
    public TransactionRecord(com.tanev.generated.tables.pojos.Transaction value) {
        super(Transaction.TRANSACTION);

        if (value != null) {
            setTransferId(value.getTransferId());
            setAccountId(value.getAccountId());
            setTransactionType(value.getTransactionType());
            setAmount(value.getAmount());
            setDate(value.getDate());
            resetChangedOnNotNull();
        }
    }
}
