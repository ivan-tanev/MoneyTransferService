/*
 * This file is generated by jOOQ.
 */
package com.tanev.generated.tables.records;


import com.tanev.generated.tables.Account;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record3<Integer, String, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.account.account_id</code>.
     */
    public AccountRecord setAccountId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.account.account_id</code>.
     */
    public Integer getAccountId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.account.name</code>.
     */
    public AccountRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.account.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.account.current_balance</code>.
     */
    public AccountRecord setCurrentBalance(BigDecimal value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.account.current_balance</code>.
     */
    public BigDecimal getCurrentBalance() {
        return (BigDecimal) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, BigDecimal> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Account.ACCOUNT.ACCOUNT_ID;
    }

    @Override
    public Field<String> field2() {
        return Account.ACCOUNT.NAME;
    }

    @Override
    public Field<BigDecimal> field3() {
        return Account.ACCOUNT.CURRENT_BALANCE;
    }

    @Override
    public Integer component1() {
        return getAccountId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public BigDecimal component3() {
        return getCurrentBalance();
    }

    @Override
    public Integer value1() {
        return getAccountId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public BigDecimal value3() {
        return getCurrentBalance();
    }

    @Override
    public AccountRecord value1(Integer value) {
        setAccountId(value);
        return this;
    }

    @Override
    public AccountRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public AccountRecord value3(BigDecimal value) {
        setCurrentBalance(value);
        return this;
    }

    @Override
    public AccountRecord values(Integer value1, String value2, BigDecimal value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(Integer accountId, String name, BigDecimal currentBalance) {
        super(Account.ACCOUNT);

        setAccountId(accountId);
        setName(name);
        setCurrentBalance(currentBalance);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(com.tanev.generated.tables.pojos.Account value) {
        super(Account.ACCOUNT);

        if (value != null) {
            setAccountId(value.getAccountId());
            setName(value.getName());
            setCurrentBalance(value.getCurrentBalance());
            resetChangedOnNotNull();
        }
    }
}
